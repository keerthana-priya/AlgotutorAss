1. roman-to-integer :
	int romanToInt(char * s){
    int result=0;
    for(;*s!='\0';s++){
        switch(*s){
            case 'I':
                result+=(s[1]=='X' || s[1]=='V'?-1:1);
                break;
            case 'X':
                result+=(s[1]=='L' || s[1]=='C'?-10:10);
                break;
            case 'C':
                result+=(s[1]=='D' || s[1]=='M'?-100:100);
                break;
            case 'V':
                result+=5;
                break;
            case 'L':
                result+=50;
                break;
            case 'D':
                result+=500;
                break;
            case 'M':
                result+=1000;
                break;
        }
    }
    return result;
}

2. longest-common-prefix :
	class Solution:
  def longestCommonPrefix(self, strs: List[str]) -> str:
    if not strs:
      return ''

    for i in range(len(strs[0])):
      for j in range(1, len(strs)):
        if i == len(strs[j]) or strs[j][i] != strs[0][i]:
          return strs[0][:i]

    return strs[0]
3.valid-palindrome :
	class Solution:
    def isPalindrome(self, s: str) -> bool:
        l=0
        r=len(s)-1

        while l<r:
            while l<r and not s[l].isalnum():
                l+=1
            while l<r and not s[r].isalnum():
                r-=1
            if s[l].lower() != s[r].lower():
                return False
            l+=1
            r-=1
        return True
4.valid-anagram :
	class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        dict = collections.Counter(s)

        for c in t:
            dict[c]-=1
            if dict[c]<0:
                return False
        return True
5.reverse-words-in-a-string :
	class Solution:
    def reverseWords(self, s: str) -> str:
        return ' '.join(reversed(s.split()))
6.count-and-say :
	class Solution:
   def countAndSay(self, n: int) -> str:
    ans = '1'

    for _ in range(n - 1):
      nxt = ''
      i = 0
      while i < len(ans):
        count = 1
        while i + 1 < len(ans) and ans[i] == ans[i + 1]:
          count += 1
          i += 1
        nxt += str(count) + ans[i]
        i += 1
      ans = nxt

    return ans
7.longest-valid-parentheses :
	class Solution:
  def longestValidParentheses(self, s: str) -> int:
    s2 = ')' + s
    # dp[i] := Length of longest valid parentheses substring of s2[1..i]
    dp = [0] * len(s2)

    for i in range(1, len(s2)):
      if s2[i] == ')' and s2[i - dp[i - 1] - 1] == '(':
        dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2

    return max(dp)
8.valid-number :
 	class Solution:
  def isNumber(self, s: str) -> bool:
    s = s.strip()
    if not s:
      return False

    seenNum = False
    seenDot = False
    seenE = False

    for i, c in enumerate(s):
      if c == '.':
        if seenDot or seenE:
          return False
        seenDot = True
      elif c == 'e' or c == 'E':
        if seenE or not seenNum:
          return False
        seenE = True
        seenNum = False
      elif c in '+-':
        if i > 0 and s[i - 1] not in 'eE':
          return False
        seenNum = False
      else:
        if not c.isdigit():
          return False
        seenNum = True

    return seenNum 